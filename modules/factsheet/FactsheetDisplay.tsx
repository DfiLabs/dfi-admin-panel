'use client'

import { useState } from 'react'
import { motion } from 'framer-motion'
import { Download, Share, TrendingUp, Calendar, BarChart3, Target, FileText } from 'lucide-react'
import PDFFactsheet from './PDFFactsheet'

interface FactsheetData {
  strategy: string
  fileName: string
  performance: number
  sharpeRatio: number
  maxDrawdown: number
  totalReturn: number
  volatility: number
  winRate: number
  totalTrades: number
  avgTradeReturn: number
}

interface FactsheetDisplayProps {
  data: FactsheetData
  onClose: () => void
}

export default function FactsheetDisplay({ data, onClose }: FactsheetDisplayProps) {
  const [showPDFGenerator, setShowPDFGenerator] = useState(false)
  
  const strategyInfo = {
    'smart-arbitrage': {
      name: 'SmartArb',
      description: 'Basis capture between futures/perps and spot pairs for low-volatility yield. Delta-neutral strategy focused on basis trading opportunities.',
      color: 'blue'
    },
    'descartes': {
      name: 'Descartes',
      description: 'Cross-sectional momentum machine-learning long/short strategy in liquid markets, refreshed daily to capture cross-sectional momentum. Directional exposure when model confidence is high.',
      color: 'purple'
    },
    'vision': {
      name: 'Vision',
      description: 'Selective long exposure with dynamic hedging powered by factor & sentiment regimes. Discretionary trading on crypto with systematic risk management.',
      color: 'green'
    }
  }

  const strategy = strategyInfo[data.strategy as keyof typeof strategyInfo]

  const handleDownload = () => {
    const factsheetName = `${data.fileName}-${strategy.name}-factsheet.csv`
    
    const csvContent = [
      ['Metric', 'Value'],
      ['Strategy', strategy.name],
      ['File Name', data.fileName],
      ['Total Return', `${data.performance.toFixed(2)}%`],
      ['Volatility', `${data.volatility.toFixed(2)}%`],
      ['Sharpe Ratio', data.sharpeRatio.toFixed(2)],
      ['Max Drawdown', `${data.maxDrawdown.toFixed(2)}%`],
      ['Win Rate', `${data.winRate.toFixed(1)}%`],
      ['Total Trades', data.totalTrades.toString()],
      ['Avg Trade Return', `${data.avgTradeReturn.toFixed(2)}%`],
      ['Generated Date', new Date().toLocaleDateString()],
      ['Generated By', 'DFI Labs Factsheet Platform']
    ].map(row => row.join(',')).join('\n')

    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' })
    const link = document.createElement('a')
    if (link.download !== undefined) {
      const url = URL.createObjectURL(blob)
      link.setAttribute('href', url)
      link.setAttribute('download', factsheetName)
      link.style.visibility = 'hidden'
      document.body.appendChild(link)
      link.click()
      document.body.removeChild(link)
    }
  }

  const handlePDFDownload = () => {
    // For now, we'll create a simple text version
    // In a real implementation, you'd use a library like jsPDF or html2canvas
    const pdfContent = `
DFI Labs Factsheet
${strategy.name} Strategy

File: ${data.fileName}
Generated: ${new Date().toLocaleDateString()}

Strategy Description:
${strategy.description}

Performance Metrics:
- Total Return: ${data.performance.toFixed(2)}%
- Sharpe Ratio: ${data.sharpeRatio.toFixed(2)}
- Max Drawdown: ${data.maxDrawdown.toFixed(2)}%
- Volatility: ${data.volatility.toFixed(2)}%

Trading Statistics:
- Total Trades: ${data.totalTrades}
- Win Rate: ${data.winRate.toFixed(1)}%
- Avg Trade Return: ${data.avgTradeReturn.toFixed(2)}%

Generated by DFI Labs Factsheet Platform
    `.trim()

    const blob = new Blob([pdfContent], { type: 'text/plain' })
    const link = document.createElement('a')
    const url = URL.createObjectURL(blob)
    link.setAttribute('href', url)
    link.setAttribute('download', `${data.fileName}-${strategy.name}-factsheet.txt`)
    link.style.visibility = 'hidden'
    document.body.appendChild(link)
    link.click()
    document.body.removeChild(link)
  }

  return (
    <motion.div
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      className="fixed inset-0 bg-black/50 flex items-center justify-center p-4 z-50"
      onClick={onClose}
    >
      <motion.div
        initial={{ scale: 0.9, opacity: 0 }}
        animate={{ scale: 1, opacity: 1 }}
        className="bg-white rounded-lg shadow-2xl max-w-4xl w-full max-h-[90vh] overflow-y-auto"
        onClick={(e) => e.stopPropagation()}
      >
        {/* Header */}
        <div className="sticky top-0 bg-white border-b border-dfi-border p-6 rounded-t-lg">
          <div className="flex justify-between items-start">
            <div>
              <h1 className="text-2xl font-bold dfi-text-gradient">{strategy.name} Factsheet</h1>
              <p className="text-dfi-text-light mt-1">{data.fileName}</p>
            </div>
            <div className="flex space-x-2">
              <button className="p-2 text-dfi-text-light hover:text-dfi-accent transition-colors">
                <Share className="w-5 h-5" />
              </button>
              <button className="p-2 text-dfi-text-light hover:text-dfi-accent transition-colors">
                <Download className="w-5 h-5" />
              </button>
              <button
                onClick={onClose}
                className="p-2 text-dfi-text-light hover:text-dfi-text transition-colors"
              >
                Ã—
              </button>
            </div>
          </div>
        </div>

        {/* Content */}
        <div className="p-6 space-y-8">
          {/* Strategy Description */}
          <div className="bg-gray-50 rounded-lg p-6">
            <h3 className="text-lg font-semibold text-dfi-text mb-2">Strategy Overview</h3>
            <p className="text-dfi-text-light">{strategy.description}</p>
          </div>

          {/* Key Metrics */}
          <div>
            <h3 className="text-lg font-semibold text-dfi-text mb-4">Key Performance Metrics</h3>
            <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
              <div className="dfi-card p-4 text-center">
                <TrendingUp className="w-8 h-8 text-green-500 mx-auto mb-2" />
                <p className="text-2xl font-bold text-dfi-text">
                  {data.performance > 0 ? '+' : ''}{data.performance.toFixed(2)}%
                </p>
                <p className="text-sm text-dfi-text-light">Total Return</p>
              </div>
              <div className="dfi-card p-4 text-center">
                <Target className="w-8 h-8 text-blue-500 mx-auto mb-2" />
                <p className="text-2xl font-bold text-dfi-text">{data.sharpeRatio.toFixed(2)}</p>
                <p className="text-sm text-dfi-text-light">Sharpe Ratio</p>
              </div>
              <div className="dfi-card p-4 text-center">
                <BarChart3 className="w-8 h-8 text-red-500 mx-auto mb-2" />
                <p className="text-2xl font-bold text-dfi-text">{data.maxDrawdown.toFixed(2)}%</p>
                <p className="text-sm text-dfi-text-light">Max Drawdown</p>
              </div>
              <div className="dfi-card p-4 text-center">
                <Calendar className="w-8 h-8 text-purple-500 mx-auto mb-2" />
                <p className="text-2xl font-bold text-dfi-text">{data.volatility.toFixed(2)}%</p>
                <p className="text-sm text-dfi-text-light">Volatility</p>
              </div>
            </div>
          </div>

          {/* Detailed Stats */}
          <div className="grid md:grid-cols-2 gap-6">
            <div className="dfi-card p-6">
              <h4 className="font-semibold text-dfi-text mb-4">Trading Statistics</h4>
              <div className="space-y-3">
                <div className="flex justify-between">
                  <span className="text-dfi-text-light">Total Trades</span>
                  <span className="font-medium text-dfi-text">{data.totalTrades}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-dfi-text-light">Win Rate</span>
                  <span className="font-medium text-dfi-text">{data.winRate.toFixed(1)}%</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-dfi-text-light">Avg Trade Return</span>
                  <span className="font-medium text-dfi-text">
                    {data.avgTradeReturn > 0 ? '+' : ''}{data.avgTradeReturn.toFixed(2)}%
                  </span>
                </div>
              </div>
            </div>

            <div className="dfi-card p-6">
              <h4 className="font-semibold text-dfi-text mb-4">Risk Metrics</h4>
              <div className="space-y-3">
                <div className="flex justify-between">
                  <span className="text-dfi-text-light">Annualized Return</span>
                  <span className="font-medium text-dfi-text">
                    {data.performance > 0 ? '+' : ''}{data.performance.toFixed(2)}%
                  </span>
                </div>
                <div className="flex justify-between">
                  <span className="text-dfi-text-light">Risk-Adjusted Return</span>
                  <span className="font-medium text-dfi-text">{data.sharpeRatio.toFixed(2)}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-dfi-text-light">Maximum Drawdown</span>
                  <span className="font-medium text-dfi-text">{data.maxDrawdown.toFixed(2)}%</span>
                </div>
              </div>
            </div>
          </div>

          {/* Performance Chart Placeholder */}
          <div className="dfi-card p-6">
            <h4 className="font-semibold text-dfi-text mb-4">Performance Chart</h4>
            <div className="h-64 bg-gray-100 rounded-lg flex items-center justify-center">
              <p className="text-dfi-text-light">Performance chart would be displayed here</p>
            </div>
          </div>
        </div>

        {/* Footer */}
        <div className="sticky bottom-0 bg-gray-50 border-t border-dfi-border p-6 rounded-b-lg">
          <div className="flex justify-between items-center">
            <p className="text-sm text-dfi-text-light">
              Generated on {new Date().toLocaleDateString()} by DFI Labs
            </p>
            <div className="flex space-x-3">
              <button onClick={() => setShowPDFGenerator(true)} className="dfi-button-primary">Generate PDF</button>
            </div>
          </div>
        </div>
      </motion.div>
      
      {/* PDF Generator Modal */}
      {showPDFGenerator && (
        <PDFFactsheet
          data={data}
          onClose={() => setShowPDFGenerator(false)}
        />
      )}
    </motion.div>
  )
}
