'use client'

import { useState, useEffect } from 'react'
import { motion } from 'framer-motion'
import { FileText, Download, Eye, Calendar, TrendingUp } from 'lucide-react'
import PDFFactsheet from '../../components/PDFFactsheet'

interface Factsheet {
  id: string
  name: string
  strategy: 'smart-arbitrage' | 'descartes' | 'vision'
  createdAt: string
  status: 'completed' | 'processing'
  performance?: number
}

export default function HistoryPage() {
  const [factsheets, setFactsheets] = useState<Factsheet[]>([])
  const [filter, setFilter] = useState<'all' | 'smart-arbitrage' | 'descartes' | 'vision'>('all')
  const [showPDFGenerator, setShowPDFGenerator] = useState(false)
  const [selectedFactsheet, setSelectedFactsheet] = useState<Factsheet | null>(null)

  useEffect(() => {
    // Load factsheets from localStorage
    const saved = localStorage.getItem('factsheets')
    if (saved) {
      setFactsheets(JSON.parse(saved))
    }
  }, [])

  const filteredFactsheets = factsheets.filter(fs => 
    filter === 'all' || fs.strategy === filter
  )

  const strategyNames = {
    'smart-arbitrage': 'SmartArb',
    'descartes': 'Descartes',
    'vision': 'Vision'
  }

  const getStrategyColor = (strategy: string) => {
    switch (strategy) {
      case 'smart-arbitrage': return 'bg-blue-100 text-blue-800'
      case 'descartes': return 'bg-purple-100 text-purple-800'
      case 'vision': return 'bg-green-100 text-green-800'
      default: return 'bg-gray-100 text-gray-800'
    }
  }

  const handleDownload = (factsheet: Factsheet) => {
    const strategyName = strategyNames[factsheet.strategy]
    const factsheetName = `${factsheet.name}-factsheet.csv`
    
    const csvContent = [
      ['Metric', 'Value'],
      ['Strategy', strategyName],
      ['File Name', factsheet.name],
      ['Performance', `${factsheet.performance?.toFixed(2) || 'N/A'}%`],
      ['Created Date', new Date(factsheet.createdAt).toLocaleDateString()],
      ['Status', factsheet.status],
      ['Generated By', 'DFI Labs Factsheet Platform']
    ].map(row => row.join(',')).join('\n')

    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' })
    const link = document.createElement('a')
    if (link.download !== undefined) {
      const url = URL.createObjectURL(blob)
      link.setAttribute('href', url)
      link.setAttribute('download', factsheetName)
      link.style.visibility = 'hidden'
      document.body.appendChild(link)
      link.click()
      document.body.removeChild(link)
    }
  }

  return (
    <div className="min-h-screen dfi-gradient">
      {/* Header */}
      <header className="border-b border-dfi-border bg-white/80 backdrop-blur-sm">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center py-6">
            <a href="/" className="flex items-center space-x-3 hover:opacity-80 transition-opacity">
              <div className="w-10 h-10 dfi-accent-gradient rounded-lg flex items-center justify-center">
                <span className="text-white font-bold text-xl">DF</span>
              </div>
        <div>
          <h1 className="text-2xl font-bold dfi-text-gradient">DFI Labs</h1>
          <p className="text-dfi-text-light text-sm">Investment Management</p>
        </div>
            </a>
            <a href="/" className="text-dfi-text-light hover:text-dfi-text transition-colors">
              ‚Üê Back to Generator
            </a>
          </div>
        </div>
      </header>

      <main className="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Filter Tabs */}
        <div className="flex space-x-1 mb-8">
          {[
            { id: 'all', label: 'All' },
            { id: 'smart-arbitrage', label: 'SmartArb' },
            { id: 'descartes', label: 'Descartes' },
            { id: 'vision', label: 'Vision' }
          ].map(({ id, label }) => (
            <button
              key={id}
              onClick={() => setFilter(id as any)}
              className={`px-4 py-2 rounded-lg transition-all ${
                filter === id
                  ? 'dfi-accent-gradient text-white shadow-lg'
                  : 'text-dfi-text-light hover:text-dfi-text hover:bg-white/50'
              }`}
            >
              {label}
            </button>
          ))}
        </div>

        {/* Factsheets Grid */}
        {filteredFactsheets.length === 0 ? (
          <div className="text-center py-12">
            <FileText className="w-16 h-16 text-dfi-text-light mx-auto mb-4" />
            <h3 className="text-xl font-semibold text-dfi-text mb-2">No Factsheets Yet</h3>
            <p className="text-dfi-text-light mb-6">Generate your first factsheet to see it here</p>
            <a href="/" className="dfi-button-primary">
              Create Factsheet
            </a>
          </div>
        ) : (
          <div className="grid gap-6">
            {filteredFactsheets.map((factsheet) => (
              <motion.div
                key={factsheet.id}
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                className="dfi-card p-6"
              >
                <div className="flex items-center justify-between">
                  <div className="flex items-center space-x-4">
                    <div className="w-12 h-12 dfi-accent-gradient rounded-lg flex items-center justify-center">
                      <FileText className="w-6 h-6 text-white" />
                    </div>
                    <div>
                      <h3 className="text-lg font-semibold text-dfi-text">{factsheet.name}</h3>
                      <div className="flex items-center space-x-4 mt-1">
                        <span className={`px-2 py-1 text-xs font-medium rounded-full ${getStrategyColor(factsheet.strategy)}`}>
                          {strategyNames[factsheet.strategy]}
                        </span>
                        <div className="flex items-center space-x-1 text-dfi-text-light text-sm">
                          <Calendar className="w-4 h-4" />
                          <span>{new Date(factsheet.createdAt).toLocaleDateString()}</span>
                        </div>
                        {factsheet.performance && (
                          <div className="flex items-center space-x-1 text-sm">
                            <TrendingUp className="w-4 h-4 text-green-500" />
                            <span className="text-green-600 font-medium">
                              {factsheet.performance > 0 ? '+' : ''}{factsheet.performance.toFixed(2)}%
                            </span>
                          </div>
                        )}
                      </div>
                    </div>
                  </div>
                  <div className="flex items-center space-x-2">
                    <button 
                      onClick={() => {
                        setSelectedFactsheet(factsheet)
                        setShowPDFGenerator(true)
                      }}
                      className="p-2 text-dfi-text-light hover:text-dfi-accent transition-colors"
                      title="Generate PDF"
                    >
                      <FileText className="w-5 h-5" />
                    </button>
                    <button 
                      onClick={() => handleDownload(factsheet)}
                      className="p-2 text-dfi-text-light hover:text-dfi-accent transition-colors"
                      title="Download CSV"
                    >
                      <Download className="w-5 h-5" />
                    </button>
                  </div>
                </div>
              </motion.div>
            ))}
          </div>
        )}
      </main>

      {/* PDF Generator Modal */}
      {showPDFGenerator && selectedFactsheet && (
        <PDFFactsheet
          data={{
            strategy: selectedFactsheet.strategy,
            fileName: selectedFactsheet.name,
            performance: selectedFactsheet.performance || 0,
            sharpeRatio: 1.5,
            maxDrawdown: 8.5,
            totalReturn: selectedFactsheet.performance || 0,
            volatility: 15.2,
            winRate: 65.0,
            totalTrades: 150,
            avgTradeReturn: 0.8
          }}
          onClose={() => {
            setShowPDFGenerator(false)
            setSelectedFactsheet(null)
          }}
        />
      )}
    </div>
  )
}
